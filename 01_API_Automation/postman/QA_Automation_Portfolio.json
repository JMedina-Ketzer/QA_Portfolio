{
	"info": {
		"_postman_id": "b548b712-4afa-451d-aa9a-fc042474ec8f",
		"name": "QA_Automation_Portfolio",
		"description": "\"Professional API automation portfolio - CRUD, variables, real scenarios\"",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "43025090"
	},
	"item": [
		{
			"name": "01_API_Fundamentals",
			"item": [
				{
					"name": "Basic_CRUD_Operations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Get data from current iteration\r",
									"const testScenario = pm.iterationData.get(\"test_scenario\");\r",
									"const expectedStatus = parseInt(pm.iterationData.get(\"expected_status\"));\r",
									"\r",
									"// Debug information\r",
									"console.log(\"Running scenario:\", testScenario);\r",
									"console.log(\"Expected status:\", expectedStatus);\r",
									"console.log(\"Request data:\", {\r",
									"    userId: pm.iterationData.get(\"userId\"),\r",
									"    title: pm.iterationData.get(\"title\"),\r",
									"    body: pm.iterationData.get(\"body\")\r",
									"});\r",
									"\r",
									"// Main test - validate status code\r",
									"pm.test(`Status should be ${expectedStatus} for scenario: ${testScenario}`, function() {\r",
									"    pm.response.to.have.status(expectedStatus);\r",
									"});\r",
									"\r",
									"// Additional validation for successful requests (201)\r",
									"if (pm.response.code === 201) {\r",
									"    pm.test(\"Response should have id when successful\", function() {\r",
									"        const jsonData = pm.response.json();\r",
									"        pm.expect(jsonData).to.have.property('id');\r",
									"        pm.expect(jsonData.id).to.be.a('number');\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Response should match request structure\", function() {\r",
									"        const jsonData = pm.response.json();\r",
									"        pm.expect(jsonData.userId).to.eql(parseInt(pm.iterationData.get(\"userId\")));\r",
									"        pm.expect(jsonData.title).to.eql(pm.iterationData.get(\"title\"));\r",
									"        pm.expect(jsonData.body).to.eql(pm.iterationData.get(\"body\"));\r",
									"    });\r",
									"}\r",
									"\r",
									"// Additional validation for error requests (400, 404)\r",
									"if (pm.response.code >= 400) {\r",
									"    pm.test(\"Error response should have meaningful structure\", function() {\r",
									"        // Even error responses should be valid JSON\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userId\": {{userId}},\r\n    \"title\": \"{{title}}\",\r\n    \"body\": \"{{body}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/posts",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET_Created_Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate we get 200 OK\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Validate we retrieved the correct post\r",
									"pm.test(\"Retrieved post matches created one\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    const savedId = pm.collectionVariables.get(\"created_post_id\");\r",
									"    pm.expect(jsonData.id).to.eql(savedId);\r",
									"    pm.expect(jsonData.title).to.eql(\"QA Automation Test\");\r",
									"});\r",
									"\r",
									"// Validate response structure\r",
									"pm.test(\"Response has all required fields\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.all.keys('id', 'title', 'body', 'userId');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/posts/{{created_post_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts",
								"{{created_post_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET_Existing_Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Retrieved post has expected structure\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(1);\r",
									"    pm.expect(jsonData).to.have.all.keys('id', 'title', 'body', 'userId');\r",
									"    pm.expect(jsonData.title).to.be.a('string');\r",
									"    pm.expect(jsonData.body).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is acceptable\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/posts/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT_Update_Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"PUT response contains updated data\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.title).to.eql(\"UPDATED: QA Automation Test\");\r",
									"    pm.expect(jsonData.body).to.eql(\"This post was updated via PUT request\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response structure remains consistent\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.all.keys('id', 'title', 'body', 'userId');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 1,\r\n    \"title\": \"UPDATED: QA Automation Test\",\r\n    \"body\": \"This post was updated via PUT request\",\r\n    \"userId\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/posts/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE_Remove_Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"DELETE operation simulated successfully\", () => {\r",
									"    // JSONPlaceholder retorna objeto vazio para DELETE\r",
									"    pm.response.to.have.body(\"{}\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is fast\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/posts/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "02_Advanced_Automation",
			"item": []
		},
		{
			"name": "03_Real_World_Scenarios",
			"item": []
		}
	],
	"variable": [
		{
			"key": "created_post_id",
			"value": ""
		}
	]
}
